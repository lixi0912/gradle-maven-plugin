def mavHost = project.properties.getOrDefault('mavHost', 'https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/master/')
apply from: "${mavHost}/utils.gradle"

subprojects {
    project.apply plugin: 'maven-publish'

    project.afterEvaluate {
        project.apply from: "${mavHost}/artifact-javadoc-handler.gradle"
        project.apply from: "${mavHost}/artifact-pom-manager.gradle"

        publishing.publications {
            if (isAndroidProject()) {
                android.libraryVariants.all { variant ->
                    if (!variant.buildType.debuggable) {
                        "maven${variant.name.capitalize()}Publish"(MavenPublication) {
                            groupId getStringProperty('mavGroupId')
                            artifactId getProjectName(variant.flavorName)
                            version = getProjectVersion()


                            artifact project.tasks.findByName("bundle${variant.name.capitalize()}Aar")
                            artifact androidJavadocsJar
                            artifact androidSourcesJar


                            decoratePom(pom)
                        }
                    }
                }
            } else {
                mavenPublish(MavenPublication) {
                    artifact jar
                    artifact sourcesJar
                    artifact javadocJar

                    decoratePom(pom)
                }
            }

        }
        publishing.repositories {
            def isToRemoteRepo = getBooleanProperty("mavPublishToRemoteRepo")
            def isToInternalRepo = getBooleanProperty("mavPublishToInternalRepo")
            def isToMavenLocal = getBooleanProperty("mavPublishToMavenLocal")

            if (isToRemoteRepo) {
                maven {
                    credentials {
                        username getStringProperty("mavRemoteRepoUser")
                        password getStringProperty("mavRemoteRepoPassword")
                    }
                    url = getStringProperty("mavRepoRemoteUrl")
                }
            }

            if (isToInternalRepo) {
                maven {
                    url = getStringProperty("mavRepoInternalUrl")
                }
            }

            if (isToMavenLocal || (!isToInternalRepo && !isToRemoteRepo)) {
                mavenLocal()
            }
        }

    }
}
